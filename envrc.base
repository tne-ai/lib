#!/usr/bin/env bash

source_up_if_exists
dotenv_if_exists

# # https://unix.stackexchange.com/questions/575481/how-can-i-find-the-ancestor-directory-with-a-given-name
pwd="$PWD" && export WS_DIR="${pwd%git"${pwd#*git}"}"
if [[ ! $WS_DIR =~ ws ]]; then
	WS_DIR="$(find . -maxdepth 1 -name "ws*" -exec realpath {} \; | sort | head -n 1)"
fi

# from https://github.com/direnv/direnv/blob/master/man/direnv-stdlib.1.md
layout go
layout node
# Only create a python venv is python is locally installed with asdf cmd direnv set _python _version_
if [[ -r .python-version ]] || [[ -r .tool-versions ]] && grep "^python" .tool-versions; then
	layout uv
fi

# Added by install-1password.sh on Mon Sep  2 14:45:33 PDT 2024
echo "checking api keys"
export ANTHROPIC_MAX=true
if ! command -v claude >/dev/null && $ANTHROPIC_MAX; then
	[[ -v ANTHROPIC_API_KEY ]] || export "ANTHROPIC_API_KEY"="$(op item get "Anthropic API Key Dev" --fields "api key" --vault "DevOps" --reveal)"
fi
[[ -v AWS_ACCESS_KEY_ID ]] || export "AWS_ACCESS_KEY_ID"="$(op item get "AWS Access Key" --fields "access key id" --vault "DevOps" --reveal)"
[[ -v AWS_SECRET_ACCESS_KEY ]] || export "AWS_SECRET_ACCESS_KEY"="$(op item get "AWS Access Key" --fields "secret access key" --vault "DevOps" --reveal)"
[[ -v BRAVE_SEARCH_API_KEY ]] || export "BRAVE_SEARCH_API_KEY"="$(op item get "Brave Search API Key Dev" --fields "api key" --vault "DevOps" --reveal)"
[[ -v BROWSERBASE_API_KEY ]] || export "BROWSERBASE_API_KEY"="$(op item get "BrowserBase API Key Dev" --fields "api key" --vault "DevOps" --reveal)"
[[ -v BROWSERBASE_PROJECT_ID ]] || export "BROWSERBASE_PROJECT_ID"="$(op item get "BrowserBase API Key Dev" --fields "project id" --vault "DevOps" --reveal)"
[[ -v BROWSERLESS_API_TOKEN ]] || export "BROWSERLESS_API_TOKEN"="$(op item get "Browserless API Key Dev" --fields "api key" --vault "DevOps" --reveal)"
# [[ -v CIVITAI_TOKEN ]] || export "CIVITAI_TOKEN"="$(op item get "Civitai API Key Dev" --fields "api key" --vault "DevOps" --reveal)"
[[ -v DEEPSEEK_API_KEY ]] || export "DEEPSEEK_API_KEY"="$(op item get "deepseek API Key Dev" --fields "api key" --vault "DevOps" --reveal)"
[[ -v DIGITALOCEAN_ACCESS_TOKEN ]] || export "DIGITALOCEAN_ACCESS_TOKEN"="$(op item get "DigitalOcean Personal Access Token" --fields "token" --vault "Private" --reveal)"
# [[ -v GITHUB_TOKEN ]] || export "GITHUB_TOKEN"="$(op item get "GitHub Personal Access Token Dev" --fields "personal access token" --vault "DevOps" --reveal)"
[[ -v ELEVENLABS_API_KEY ]] || export "ELEVENLABS_API_KEY"="$(op item get "ElevenLabs API Key Dev" --fields "api key" --vault "DevOps" --reveal)"
[[ -v FIRECRAWL_API_KEY ]] || export "FIRECRAWL_API_KEY"="$(op item get "firecrawl API Key Dev" --fields "api key" --vault "DevOps" --reveal)"
[[ -v GITHUB_TOKEN_CLASSIC ]] || export "GITHUB_TOKEN_CLASSIC"="$(op item get "GitHub Personal Access Token Classic" --fields "personal access token" --vault "Private" --reveal)"
[[ -v GEMINI_API_KEY ]] || export "GEMINI_API_KEY"="$(op item get "Google Gemini API Key Dev" --fields "api key" --vault "DevOps" --reveal)"
[[ -v GOOGLE_API_KEY ]] || export "GOOGLE_API_KEY"="$(op item get "Google Gemini API Key Dev" --fields "api key" --vault "DevOps" --reveal)"
[[ -v GOOGLE_MAPS_API_KEY ]] || export "GOOGLE_MAPS_API_KEY"="$(op item get "Google Maps API Key Dev" --fields "api key" --vault "DevOps" --reveal)"
[[ -v GROQ_API_KEY ]] || export "GROQ_API_KEY"="$(op item get "Groq API Key Dev" --fields "api key" --vault "DevOps" --reveal)"
[[ -v HF_TOKEN ]] || export "HF_TOKEN"="$(op item get "Hugging Face API Token Dev" --fields "user access token" --vault "DevOps" --reveal)"
[[ -v LAMINI_API_KEY ]] || export "LAMINI_API_KEY"="$(op item get "LAMINI API Token Dev" --fields "api token" --vault "DevOps" --reveal)"
# [[ -v LOCALSTACK_API_KEY ]] || export "LOCALSTACK_API_KEY"="$(op item get "LocalStack API Key" --fields "api key" --vault "DevOps" --reveal)"
[[ -v MISTRAL_API_KEY ]] || export "MISTRAL_API_KEY"="$(op item get "Mistral API Key Dev" --fields "api key" --vault "DevOps" --reveal)"
[[ -v MCPO_API_KEY ]] || export "MCPO_API_KEY"="$(op item get "MCPO Server API Key Local" --fields "api key" --vault "DevOps" --reveal)"
[[ -v OPENAI_API_KEY ]] || export "OPENAI_API_KEY"="$(op item get "OpenAI API Key Dev" --fields "api key" --vault "DevOps" --reveal)"
[[ -v OPENROUTER_API_KEY ]] || export "OPENROUTER_API_KEY"="$(op item get "OpenRouter API Key Dev" --fields "key" --vault "DevOps" --reveal)"
[[ -v PERPLEXITY_API_KEY ]] || export "PERPLEXITY_API_KEY"="$(op item get "Perplexity API Key Dev" --fields "api key" --vault "DevOps" --reveal)"
[[ -v REPLICATE_API_KEY ]] || export "REPLICATE_API_KEY"="$(op item get "Replicate API Token Dev" --fields "api token" --vault "DevOps" --reveal)"
[[ -v SAMBANOVA_API_KEY ]] || export "SAMBANOVA_API_KEY"="$(op item get "SambaNova API Token Dev" --fields "api token" --vault "DevOps" --reveal)"
[[ -v SERPAPI_API_KEY ]] || export "SERPAPI_API_KEY"="$(op item get "SerpApi API Key Dev" --fields "api key" --vault "DevOps" --reveal)"
[[ -v SLASH_GPT_ENV_WEBPILOT_UID ]] || export "SLASH_GPT_ENV_WEBPILOT_UID"="$(op item get "Webpilot UID Dev" --fields "key" --vault "DevOps" --reveal)"
[[ -v STEPFUN_API_KEY ]] || export "STEPFUN_API_KEY"="$(op item get "Stepfun API Key Dev" --fields "interface key" --vault "DevOps" --reveal)"
[[ -v SUPERSET_SECRET_KEY ]] || export "SUPERSET_SECRET_KEY"="$(op item get "Apache Superset Secret Key Dev" --fields "api key" --vault "DevOps" --reveal)"
[[ -v TAVILY_API_KEY ]] || export "TAVILY_API_KEY"="$(op item get "Tavily API Key Dev" --fields "api key" --vault "DevOps" --reveal)"
[[ -v TINFOIL_API_KEY ]] || export "TINFOIL_API_KEY"="$(op item get "Tinfoil API Key Dev" --fields "api key" --vault "DevOps" --reveal)"
[[ -v UNBOUND_API_KEY ]] || export "UNBOUND_API_KEY"="$(op item get "Unbound API Key Dev" --fields "api key" --vault "DevOps" --reveal)"
[[ -v WEBUI_API_KEY ]] || export "WEBUI_API_KEY"="$(op item get "Open WebUI API Key Dev" --fields "api key" --vault "DevOps" --reveal)"
[[ -v WEBUI_SECRET_KEY ]] || export "WEBUI_SECRET_KEY"="$(op item get "Open WebUI Secret Key Dev" --fields "secret key" --vault "DevOps" --reveal)"

# Added by install-models.sh on Sat Mar 15 10:55:19 PM PDT 2025
echo "ollama setup"
[[ -v OLLAMA_KV_CACHE_TYPE ]] || export OLLAMA_KV_CACHE_TYPE=q4_0
[[ -v OLLAMA_FLASH_ATTENTION ]] || export OLLAMA_FLASH_ATTENTION=1
[[ -v OLLAMA_CONTEXT_LENGTH ]] || export OLLAMA_CONTEXT_LENGTH=131072

# Added by install-ai.sh Jan 23 2025 by richt
echo "installing config keys"
[[ -v COMFYUI_BASE_URL ]] || COMFYUI_BASE_URL="https://localhost:8188"
[[ -v GOOGLE_DRIVE_API_KEY ]] || export "GOOGLE_DRIVE_API_KEY"="$(op item get "Google Drive and Picker API Key Dev" --fields "api key" --vault "DevOps" --reveal)"
[[ -v GOOGLE_DRIVE_CLIENT_ID ]] || export "GOOGLE_DRIVE_CLIENT_ID"="$(op item get "Google OAuth Client ID Dev" --fields "client id" --vault "DevOps" --reveal)"
[[ -v VITE_AWS_KEY ]] || export VITE_AWS_KEY="$AWS_ACCESS_KEY_ID"
[[ -v VITE_AWS_SECRET ]] || export VITE_AWS_SECRET="$AWS_SECRET_ACCESS_KEY"
[[ -v VITE_OPEN_API_KEY ]] || export VITE_OPEN_API_KEY="$OPENAI_API_KEY"
[[ -v VITE_ENDPOINT ]] || export VITE_ENDPOINT="https://wahook.dev.tne.ai"
[[ -v WEBUI_SECRET_KEY ]] || export "WEBUI_SECRET_KEY"="$(op item get "Open WebUI Secret Key Dev" --fields "secret key" --vault "DevOps" --reveal)"
[[ -v JUPYTERLAB_TOKEN ]] || export "JUPYTERLAB_TOKEN"="$(op item get "JupyterLab Local Token Dev" --fields "token" --vault "DevOps" --reveal)"
[[ -v MODEL_API_KEY ]] || export "MODEL_API_KEY"="$(op item get "Open WebUI API Key Dev" --fields "api key" --vault "DevOps" --reveal)"

# for local models in opencode
# [[ -v LOCAL_ENDPOINT ]] || export "LOCAL_ENDPOINT"="http://localhost:11434"

# mulmocast
[[ -v DEFAULT_OPENAI_IMAGE_MODEL ]] || export "DEFAULT_OPENAI_IMAGE_MODEL"="gpt-image-1"
[[ -v GOOGLE_PROJECT_ID ]] || export "GOOGLE_PROJECT_ID"="$(op item get "Google Project ID Dev" --fields "project id" --vault "DevOps" --reveal)"
