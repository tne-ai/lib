{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Rich\u2019s Fine Utility Library","text":"<p>For full documentation visit lib.docs.tongfamily.com or you can browse the GitHub repository where the main fork is github.com/richtong/lib.</p>"},{"location":"#quick-note-on-this-readmemd-and-the-upstream","title":"Quick note on this README.md and the upstream","text":"<p>If you want to update the table of contents at the top, run <code>make toc</code> and it will recreate it for you. Note that if you are viewing this with Github, you will now see Mermaid diagrams, otherwise you need a Mermaid tool to see diagrams like in Vim, the MarkdownPreview system.</p>"},{"location":"#bootstrapping-the-library-and-binaries-for-a-new-mono-repo","title":"Bootstrapping the Library (and Binaries) for a new mono repo","text":"<p>The easiest way to use these library files is to create a mono repo where you put the bin and lib in a mono repo that lives in :</p> <pre><code># copy the Makefile template assuming it is a sibling of this repo\ncd ~\nmkdir -p ws/git\ngit clone git@github.com:_yourorg_/src\ncd src\ngit submodule add git@github.com:richtong/lib\ngit submodule add git@github.com:richtong/bin\n# this is the bootstrap that gives you the Makefile from lib\ncat \"include lib/include.mk\" &gt; Makefile\n# Now you can get the templates\nmake install-repo\n</code></pre>"},{"location":"#github-actions-and-pre-commit-cdci-chain","title":"Github Actions and Pre-commit CD/CI chain","text":"<p>When adding to this repo, you should run a <code>make pre-commit-install</code> to install pre-commits. The main option is use base pre-commit-config.base.yaml as this now includes all the actions for python and jupyter into a single master.</p> <p>If you have python and jupyter notebooks that do not conform, now is the time to just fix them once and for all. It is a little work, but don\u2019t have this bite you later.</p> <p>These same pre-commit actions are used by workflow.base.yaml which is a GitHub action that uses the same .pre-commit-config.yaml and runs it in GitHub.</p> <p>You can also download act which runs GitHub Actions in a docker container on your machine to test github actions without having to push it into the cloud.</p>"},{"location":"#customizing-the-base-installation","title":"Customizing the Base installation","text":"<p>You should copy the files with the suffix TEMPLATE files to .github to get issue templates and workflow</p> <p>You should also pick the .gitignore file that you want. There is a base version and there is a version for python and so forth. Copy this into .gitignore</p> <p>If you are using Git LFS, which is highly recommended, you should copy gitattributes.* to .gitattributes</p>"},{"location":"doc/","title":"Documentation","text":"<p>The main documentation lives in README.md and you can browse in the GitHub repo.</p> <p>The Docs has the core documents in mkdocs format.</p>"},{"location":"doc/#creating-and-editing-the-documentation","title":"Creating and editing the documentation","text":"<p>Run <code>make mkdocs</code> to run a local server and check the content with a browser on your machine.</p>"},{"location":"doc/#creating-a-pushing-a-netlify-static-sites","title":"Creating a pushing a Netlify static sites","text":"<p>With a paid account you can easily create a private documentation from a private github repo. The main trick is to make sure to edit the netlify.toml file from the main template with your name. Also you need a requirements.txt that pipenv or poetry can generate. And you need a runtime.txt with the version number of the Python that you need.</p> <p>To make this work you need a Netlify account and then you authenticate with GitHub using their local applications. The only real issue is that private submodules are pain, they need a deployment key per submodule as of February 2023. And you should probably do this with a DevOps account on GitHub so it is not tied to an individual developer.</p>"},{"location":"doc/#detailed-instructions","title":"Detailed instructions","text":"<p>In here is the process:</p> <ol> <li>You will need the standard tooling from ./lib</li> <li>So put your repo as a submodules inside the ./src repo and cd into your repo</li> <li>Then copy the Makefile pieces with cp ./src/lib/Makefile.base &gt;&gt; Makefile    Adjust the Makefile includes so it points to ./src/lib/include.mk and    ./src/lib/include.python.mk (you can delete this last if the project doesn\u2019t    just python.</li> <li>Check that it works by running make and you should see a list of things to do.</li> <li>Now install the basic tooling files with make install-repo. This will only add   files and blow anything away. Now you should edit the mkdocs.yaml so that the   entries for the file and where it lives are correct, by convention it will be   repo.docs.tongfamily.ai or whatever your org   is.</li> <li>Edits your documentation starting at ./docs/index.md and add files as    needed. To set the navigation edit mkdocs.yaml</li> <li>Test this works by running make mkdocs which will create a local server    which you can access at http://localhost:8000 and    debug your site.</li> <li>Now if you are a command line jockey install the netlify cli with <code>npm    install -g netlify</code></li> <li>Or just go to Netlify and login as admin    and the password is 1Password</li> <li>In the middle of the screen, you will see a button called add new site and    select choose an existing project, then connect ot GitHub with that button    and you should see pick a repository so lect the netdrones organization and    search for your repo.</li> <li>If this is working, it should fille things in for you but specifically the    branch to deploy is main and the build command is mkdocs build. BY THE WAY    there is no magic here, there are two files netlify.toml and runtime.txt    that were added that tell netlify this is a mkdocs site and what version of    Python to run on the client.</li> <li>Hit deploy site</li> <li>YOu should see the Netlify runner starting and it should say Production    main@HEAD and building. And when it stops at Published, click on the arrow    and click on Open Production deploy and make sure that this is the right    site. It has a random url by the way that is on the netlify site. And this    should look the same as the local build.</li> <li>Now click on the top where you see the site name and you should be back at    Site Overview, there should be a huge number 2 that says Set up Custom    domain</li> <li>Now enter the domain that you want. NOTE: DO NOT BE LIKE ME and just type    netdrones.ai, this will wipe out our company website instead put what you    want the name to be like repo.docs.netdrones.ai so    process.docs.netdrones.ai for the ./src/process repo amd hit add</li> <li>What you press verify it should say good news and you should be done. make    sure to hit force HTTPS below and then wait for the domain to work. It is    going to say Awaiting External DNS, but don\u2019t worry about that just click on    the name and make sure it works!</li> </ol>"},{"location":"doc/#dealing-with-submodules-requires-more-work","title":"Dealing with Submodules (Requires more work)","text":"<p>The one issue with Netlify is how it handles submodules. If you have private submodules, then you need to create a GitHub machine user which has read access to all the submodule repositories. With personal accounts, you need to add the machine user (or bot account) to every repository. With organizations you do that or you need to add them to the team (and this does create another seat you need to pay for).</p> <p>For \u201cfree\u201d individual users, to GitHub page and then to the repo you want in <code>Settings &gt; General &gt; Collaborators &gt; Add People</code>. It is probably easiest to create a new account with a <code>-bot</code> or <code>-netlify</code> suffix and the same user name and make sure it has two factor on as it has lots of read permissions. Unfortunately there is no command line way to do this but you can call the GitHub API to do this addition curl or gh cli</p> <pre><code>curl -i -u \"my_user_name:my_password\" -X PUT \\\n    -d '' 'https://api.github.com/repos/my_gh_userid/my_repo/collaborators/my_collaborator_id'\n# the brew install gh version is a little easier to\na# GitHub CLI api\n# https://cli.github.com/manual/gh_api\ngh api \\\n  -H \"Accept: application/vnd.github+json\" \\\n  /repos/OWNER/REPO/collaborators\n</code></pre>"},{"location":"doc/#creating-a-read-the-docs-project","title":"Creating a Read The Docs Project","text":"<p>This works if you want the documentation free since they allow free hosting. This only works for open sourced documents</p>"},{"location":"files/","title":"Files","text":"<p>These are the standard includes:</p> <p>include.mk is required and has help and configuration used for all</p> <p>The others are for specific purposes:</p> <ul> <li>include.python.mk is for python development</li> <li>include.airflow.mk for using Apache airflow</li> <li>include.docker.mk for docker managemen</li> </ul> <p>For convenience there is also Jgrahamc\u2019s excellent Gnu Makefile Standard Library which has a bunch of use functions in it kept as a submodule gmsl. This has not been updated since 2018 so be aware of that. The original code is at Sourceforge</p> <p>The v1.19 was downloaded manually on copied into our own fork for this so add it with</p> <pre><code># in your Makefile assuming you are in direct child of ./src\ninclude ../lib/gmsl/gmsl\n</code></pre>"},{"location":"install/","title":"Installation","text":"<p>This library is used by the parallel richtong/bin repo and you should put them next to each other. Normally you want to fork the repo</p> <pre><code>cd ~/ws/git\ngh fork git@github.com:richtong/lib\ngh fork git@github.com:richtong/bin\ncd src\ngit submodule add git@github.com/_yourrepo_/lib\ngit submodule add git@gihtub.com/_yourrepo_/bin\ngit submodule update --init lib bin\ncd lib\ngit remote add upstream git@github.com/richtong/lib\ncd ../bin\ngit remote add upstream git@github.com/richtong/bin\n</code></pre> <p>Then when you make a change or and want to merge from upstream then you just need to</p> <pre><code>cd ~/ws/git/_yourrepo_/bin\ngit pull --rebase upstream master\n# deal with any conflict\ngit push\n</code></pre>"},{"location":"ref/","title":"Reference","text":"<p>The detailed reference guide for APIs and command lines. Typically pulled from Python Strings with mkdocstrings. Usee ::: references.</p>"}]}