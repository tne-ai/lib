---
# https://docs.github.com/en/actions/guides/building-and-testing-python
name: Python and Pre-commit

# yamllint disable-line rule:truthy
on:
  push:
    # if you have lots of requests you can limit the branches
    branches:
      - main
      - master
      - rich-*
  pull_request:

jobs:

  python:
    # runs-on: ubuntu-latest
    runs-on: ubuntu-20.04
    # Note with this version testing you do not need tox in the cloud
    strategy:
      matrix:
        # 3.7 will not run with the current requirements.txt pinning
        # we do not need matrix that is in python version
        # https://github.com/actions/setup-python/issues/249
        # Need to quote "3.10" as this gets converted otherwise to 3.1
        python-version: ["3.10" , "3.11"]
    # checkout repo under $GITHUB_WORKSPACE
    steps:
      - name: Checkout action
        # bump from v3 to v4 to move from node 16 to node 20
        uses: actions/checkout@v4
        with:

          lfs: true
          # The default GITHUB_TOKEN token does note work for submodules
          # https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
          # https://github.com/actions/checkout/issues/116
          # but this requires a personal access token that you must create and
          # store in GitHub secrets
          # token: '{{ secrets.GITHUB_PAT }}'
          # submodules: recursive
      # install latest python version
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Display Python version
        run: python --version
      - name: Cache pip
        uses: actions/cache@v4
        with:
          # Ubuntu specific path
          path: ~/.cache/pip
          # https://github.com/actions/cache/blob/main/examples.md#python---pip
          # See if there is a cache hit looking for the requirements.txt
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      # this works in github actions
      # this fails if there is no python/requirements
      #   uses: py-actions/py-dependency-install@v3
      #   with:
      #       path: "python/requirements.txt"
      # this hangs in act but works in github actions
      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip && \
          if [ -f python/requirements.txt ]; then pip install -r python/requirements.txt; fi

  pre-commit:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout action
        uses: actions/checkout@v4
        with:
          lfs: true
          # submodules should be tested one at a time
          # submodules: recursive
      # pre-commit needs python
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      # # https://snapcraft.io/install/shfmt/ubuntu
      # Using snapd fails on act so instead use pre-commit
      # that does its own installation rather than needing shfmt
      #- name: Install shfmt
      #  run: |
      #    sudo apt-get update && \
      #    sudo apt-get install snapd && \
      #    sudo snap install shfmt
      # install dependencies for ruby gem mdl
      # we use markdownlint now instead not the ruby gem mdl
      # https://github.com/ruby/setup-ruby
      # - name: Install ruby
      # #uses: ruby/setup-ruby@v1
      # #with:
      #   #ruby-version: 3.0
      # - name: Install Gems
      # #run: |
      #   #gem install mdl
      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install markdownlint-cli
        run: npm install -g markdownlint-cli
      # brew not found in act so used dockerize version in pre-commit
      # This actually runs homebrew commands does not install it
      #- name: Install homebrew
      #  uses: artemnovichkov/action-homebrew@0.1.0
      - name: Enable Homebrew (since removed Sept 22)
        uses: Homebrew/actions/setup-homebrew@master
      #  uses: raviqqe/enable-homebrew@v1.0.0
      - name: Install hadolint
        run: brew install hadolint
      - name: Install shellcheck
        run: shellcheck --version && brew install shellcheck && shellcheck --version

      # https://github.com/pre-commit/action
      # if you are using public repo then you can use pre-commit.ci
      # as a marketplace applications
      - name: Run Pre-commit
        uses: pre-commit/action@v3.0.1
      # https://github.com/pre-commit-ci/lite-action
      # if you are using public repo then you can use pre-commit.ci
      # make sure the name  uses the default
      - uses: pre-commit-ci/lite-action@v1.1.0
        if: always()

        # No longer needed in pre-commit so edit .pre-commit-config.yaml
        # and you do not need to duplicate all these actions
        # - name: Lint with flake8
        # #pip install flake8
        # #flake8 --exclude ./model ./python
        # No longer needed in pre-commit
        # - name: Lint with mypy
        # #run: |
        #   #pip install mypy
        #   #mypy --namespace-packages $(find . -name "*.py")
        # No longer needed in pre-commit
        # - name: Lint with bandit
        # #run: |
        #   #pip install bandit
        #   #bandit $(find . -type d \( -path "./.env" -o \
        #   -path "./lambda_stage" \) \
        #   -prune -false \
        #
        # -o -name "*.py" -a -not -name "test_*")
        # No longer needed in pre-commit
        # - name: Lint with pydocstyle
        # run: |
        # # pip install pydocstyle
        # # pydocstyle --convention=google $(find . -name "*.py")
        # No longer needed in pre-commit
        # - name: Reformat with black
        # # cuses: psf/black@stable
        # A custom action https://github.com/marketplace/actions/yaml-lint
        # Causes some strange file to get linted
        # - name: Lint with yamllint action
        # uses: ibiqlik/action-yamllint@v3.0.0
        # . with:
        #  #file_or_dir: .
        # you need all config files valid for this to work
        # - name: Lint with yamllint
        # run: |
        # #pip install yamllint
        # #yamllint $(find . -name "*.yaml" -o -name "*.yml")
        # #echo running yamllint
        # #yamllint .
